date = date,
regions = region,
markets = market,
bookmakers = bookmakers,
odds_format = odds_format,
date_format = date_format
)
print(odds_history_data)
}, error = function(e) {
cat("Error fetching data for event_id:",
event_id,
"\n",
e$message,
"\n")
return(NULL)  # Return NULL in case of error
})
# Check if the data is not NULL before processing
if (!is.null(odds_history_data)) {
# Apply filters if bookmakers are provided
if (!is.null(bookmakers)) {
odds_history_data <- odds_history_data[odds_history_data$bookmaker %in% bookmakers, ]
}
# Proceed only if there are valid rows after filtering
if (nrow(odds_history_data) > 0) {
# Select the earliest and latest odds for each sport_key and bookmaker
filtered_data <- odds_history_data %>%
group_by(sport_key, bookmaker) %>%
summarize(
earliest_odds = first(outcomes_price),
latest_odds = last(outcomes_price),
home_team = first(home_team),
away_team = first(away_team),
commence_time = first(commence_time),
# include outcome_name and outcome_point for totals/spreads
outcomes_name=first(outcome_name),
outcome_point = first(outcome_point),
.groups = "drop"
)
# Append result to the list
result_list[[paste(region, market, event_id, sep = '_')]] <- filtered_data
}
}
}
}
}
# Combine the data from all event IDs
if (length(result_list) > 0) {
combined_data <- bind_rows(result_list, .id = 'region_market_event_id')
combined_data <- combined_data %>%
tidyr::separate(
region_market_event_id,
into = c('region', 'market', 'event_id'),
sep = '_'
)
# Write the combined data to a CSV file
write.csv(combined_data, file = output_file, row.names = FALSE)
cat("Historical odds data saved to:", output_file, "\n")
} else {
cat("No valid data to write to CSV.\n")
}
}
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = c("totals", 'spreads'),
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
# Define the function to fetch historical odds for multiple event_ids
get_historical_odds_for_event_ids <- function(sport_key,
date,
regions = NULL,
markets = NULL,
bookmakers = NULL,
odds_format = "decimal",
date_format = "iso",
output_file = "historical_odds.csv") {
# Initialize an empty list to store results for all event_ids
result_list <- list()
# Fetch all unique event_ids for the specified sport_key
event_ids <- get_historical_events(sport_key = sport_key,
apiKey = api_key,
date = date)$id
# Loop through each event_id
for (event_id in event_ids) {
cat("Fetching historical odds for event_id:", event_id, "\n")
for (region in regions) {
for (market in markets) {
# Fetch historical odds for each event_id using toa_sports_odds_history
odds_history_data <- tryCatch({
toa_sports_odds_history(
sport_key = sport_key,
event_ids = event_id,
date = date,
regions = region,
markets = market,
bookmakers = bookmakers,
odds_format = odds_format,
date_format = date_format
)
}, error = function(e) {
cat("Error fetching data for event_id:",
event_id,
"\n",
e$message,
"\n")
return(NULL)  # Return NULL in case of error
})
print(odds_history_data)
# Check if the data is not NULL before processing
if (!is.null(odds_history_data)) {
# Apply filters if bookmakers are provided
if (!is.null(bookmakers)) {
odds_history_data <- odds_history_data[odds_history_data$bookmaker %in% bookmakers, ]
}
# Proceed only if there are valid rows after filtering
if (nrow(odds_history_data) > 0) {
# Select the earliest and latest odds for each sport_key and bookmaker
filtered_data <- odds_history_data %>%
group_by(sport_key, bookmaker) %>%
summarize(
earliest_odds = first(outcomes_price),
latest_odds = last(outcomes_price),
home_team = first(home_team),
away_team = first(away_team),
commence_time = first(commence_time),
# include outcome_name and outcome_point for totals/spreads
outcomes_name=first(outcome_name),
outcome_point = first(outcome_point),
.groups = "drop"
)
# Append result to the list
result_list[[paste(region, market, event_id, sep = '_')]] <- filtered_data
}
}
}
}
}
# Combine the data from all event IDs
if (length(result_list) > 0) {
combined_data <- bind_rows(result_list, .id = 'region_market_event_id')
combined_data <- combined_data %>%
tidyr::separate(
region_market_event_id,
into = c('region', 'market', 'event_id'),
sep = '_'
)
# Write the combined data to a CSV file
write.csv(combined_data, file = output_file, row.names = FALSE)
cat("Historical odds data saved to:", output_file, "\n")
} else {
cat("No valid data to write to CSV.\n")
}
}
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = c("totals", 'spreads'),
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
# Define the function to fetch historical odds for multiple event_ids
get_historical_odds_for_event_ids <- function(sport_key,
date,
regions = NULL,
markets = NULL,
bookmakers = NULL,
odds_format = "decimal",
date_format = "iso",
output_file = "historical_odds.csv") {
# Initialize an empty list to store results for all event_ids
result_list <- list()
# Fetch all unique event_ids for the specified sport_key
event_ids <- get_historical_events(sport_key = sport_key,
apiKey = api_key,
date = date)$id
# Loop through each event_id
for (event_id in event_ids) {
cat("Fetching historical odds for event_id:", event_id, "\n")
for (region in regions) {
for (market in markets) {
# Fetch historical odds for each event_id using toa_sports_odds_history
odds_history_data <- tryCatch({
toa_sports_odds_history(
sport_key = sport_key,
event_ids = event_id,
date = date,
regions = region,
markets = market,
bookmakers = bookmakers,
odds_format = odds_format,
date_format = date_format
)
}, error = function(e) {
cat("Error fetching data for event_id:",
event_id,
"\n",
e$message,
"\n")
return(NULL)  # Return NULL in case of error
})
print(odds_history_data)
# Check if the data is not NULL before processing
if (!is.null(odds_history_data)) {
# Apply filters if bookmakers are provided
if (!is.null(bookmakers)) {
odds_history_data <- odds_history_data[odds_history_data$bookmaker %in% bookmakers, ]
}
# Proceed only if there are valid rows after filtering
if (nrow(odds_history_data) > 0) {
# Select the earliest and latest odds for each sport_key and bookmaker
filtered_data <- odds_history_data %>%
group_by(sport_key, bookmaker) %>%
summarize(
earliest_odds = first(outcomes_price),
latest_odds = last(outcomes_price),
home_team = first(home_team),
away_team = first(away_team),
commence_time = first(commence_time),
# include outcome_name and outcome_point for totals/spreads
outcomes_name=first(outcomes_name),
outcome_point = first(outcomes_point),
outcomes_price = first(outcomes_price)
.groups = "drop"
# Define the function to fetch historical odds for multiple event_ids
get_historical_odds_for_event_ids <- function(sport_key,
date,
regions = NULL,
markets = NULL,
bookmakers = NULL,
odds_format = "decimal",
date_format = "iso",
output_file = "historical_odds.csv") {
# Initialize an empty list to store results for all event_ids
result_list <- list()
# Fetch all unique event_ids for the specified sport_key
event_ids <- get_historical_events(sport_key = sport_key,
apiKey = api_key,
date = date)$id
# Loop through each event_id
for (event_id in event_ids) {
cat("Fetching historical odds for event_id:", event_id, "\n")
for (region in regions) {
for (market in markets) {
# Fetch historical odds for each event_id using toa_sports_odds_history
odds_history_data <- tryCatch({
toa_sports_odds_history(
sport_key = sport_key,
event_ids = event_id,
date = date,
regions = region,
markets = market,
bookmakers = bookmakers,
odds_format = odds_format,
date_format = date_format
)
}, error = function(e) {
cat("Error fetching data for event_id:",
event_id,
"\n",
e$message,
"\n")
return(NULL)  # Return NULL in case of error
})
print(odds_history_data)
# Check if the data is not NULL before processing
if (!is.null(odds_history_data)) {
# Apply filters if bookmakers are provided
if (!is.null(bookmakers)) {
odds_history_data <- odds_history_data[odds_history_data$bookmaker %in% bookmakers, ]
}
# Proceed only if there are valid rows after filtering
if (nrow(odds_history_data) > 0) {
# Select the earliest and latest odds for each sport_key and bookmaker
filtered_data <- odds_history_data %>%
group_by(sport_key, bookmaker) %>%
summarize(
earliest_odds = first(outcomes_price),
latest_odds = last(outcomes_price),
home_team = first(home_team),
away_team = first(away_team),
commence_time = first(commence_time),
# include outcome_name and outcome_point for totals/spreads
outcomes_name=first(outcomes_name),
outcome_point = first(outcomes_point),
outcomes_price = first(outcomes_price),
.groups = "drop"
)
# Append result to the list
result_list[[paste(region, market, event_id, sep = '_')]] <- filtered_data
}
}
}
}
}
# Combine the data from all event IDs
if (length(result_list) > 0) {
combined_data <- bind_rows(result_list, .id = 'region_market_event_id')
combined_data <- combined_data %>%
tidyr::separate(
region_market_event_id,
into = c('region', 'market key', 'event_id'),
sep = '_'
)
# Write the combined data to a CSV file
write.csv(combined_data, file = output_file, row.names = FALSE)
cat("Historical odds data saved to:", output_file, "\n")
} else {
cat("No valid data to write to CSV.\n")
}
}
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = c("totals", 'spreads'),
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
# Define the function to fetch historical odds for multiple event_ids
get_historical_odds_for_event_ids <- function(sport_key,
date,
regions = NULL,
markets = NULL,
bookmakers = NULL,
odds_format = "decimal",
date_format = "iso",
output_file = "historical_odds.csv") {
# Initialize an empty list to store results for all event_ids
result_list <- list()
# Fetch all unique event_ids for the specified sport_key
event_ids <- get_historical_events(sport_key = sport_key,
apiKey = api_key,
date = date)$id
# Loop through each event_id
for (event_id in event_ids) {
cat("Fetching historical odds for event_id:", event_id, "\n")
for (region in regions) {
for (market in markets) {
# Fetch historical odds for each event_id using toa_sports_odds_history
odds_history_data <- tryCatch({
toa_sports_odds_history(
sport_key = sport_key,
event_ids = event_id,
date = date,
regions = region,
markets = market,
bookmakers = bookmakers,
odds_format = odds_format,
date_format = date_format
)
}, error = function(e) {
cat("Error fetching data for event_id:",
event_id,
"\n",
e$message,
"\n")
return(NULL)  # Return NULL in case of error
})
# Check if the data is not NULL before processing
if (!is.null(odds_history_data)) {
# Apply filters if bookmakers are provided
if (!is.null(bookmakers)) {
odds_history_data <- odds_history_data[odds_history_data$bookmaker %in% bookmakers, ]
}
# Proceed only if there are valid rows after filtering
if (nrow(odds_history_data) > 0) {
# Select the earliest and latest odds for each sport_key and bookmaker
filtered_data <- odds_history_data %>%
group_by(sport_key, bookmaker) %>%
summarize(
earliest_odds = first(outcomes_price),
latest_odds = last(outcomes_price),
home_team = first(home_team),
away_team = first(away_team),
commence_time = first(commence_time),
# include outcome_name and outcome_point for totals/spreads
outcomes_name=outcomes_name,
outcome_point = first(outcomes_point),
outcomes_price = first(outcomes_price),
.groups = "drop"
)
# Append result to the list
result_list[[paste(region, market, event_id, sep = '_')]] <- filtered_data
}
}
}
}
}
# Combine the data from all event IDs
if (length(result_list) > 0) {
combined_data <- bind_rows(result_list, .id = 'region_market_event_id')
combined_data <- combined_data %>%
tidyr::separate(
region_market_event_id,
into = c('region', 'market key', 'event_id'),
sep = '_'
)
# Write the combined data to a CSV file
write.csv(combined_data, file = output_file, row.names = FALSE)
cat("Historical odds data saved to:", output_file, "\n")
} else {
cat("No valid data to write to CSV.\n")
}
}
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = c("totals", 'spreads'),
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = c("totals", 'spreads'),
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
warning()
# Example usage:
get_historical_odds_for_event_ids(
sport_key = "soccer_epl",
# Edit this as needed
date = "2024-09-01T12:00:00Z",
# Specify the date or date range
regions = "us",
# Specify region(s) (optional)
markets = 'spreads',
# Specify markets (optional)
bookmakers = NULL,
# Specify bookmakers (optional)
output_file = "historical_odds_output.csv"  # Specify output file name
)
try(toa_sports_odds_history(sport_key = 'basketball_ncaab',
event_ids = '48db9c3293a52baab881d95d38f37a98',
date = '2023-03-18T12:15:00Z',
regions = 'us',
markets = 'spreads',
odds_format = 'decimal',
date_format = 'iso',
bookmakers = NULL))
try(toa_sports_odds_history(sport_key = 'basketball_ncaab',
event_ids = '48db9c3293a52baab881d95d38f37a98',
date = '2023-03-18T12:15:00Z',
regions = 'us',
markets = 'spreads',
odds_format = 'decimal',
date_format = 'iso',
bookmakers = NULL))$outcomes_name
head(data.frame(toa_sports_odds_history(sport_key = 'basketball_ncaab',
event_ids = '48db9c3293a52baab881d95d38f37a98',
date = '2023-03-18T12:15:00Z',
regions = 'us',
markets = 'spreads',
odds_format = 'decimal',
date_format = 'iso',
bookmakers = NULL)))
get_current_odds(
sport_key = 'soccer_epl',
regions = c('us', 'uk'),
markets = c('spreads'),
bookmaker = NULL
)
co <- get_current_odds(
sport_key = 'soccer_epl',
regions = c('us', 'uk'),
markets = c('spreads'),
bookmaker = NULL
)
View(co)
h2h <- get_current_odds(
sport_key = 'soccer_epl',
regions = c('us', 'uk'),
markets = c('spreads'),
bookmaker = NULL
)
View(h2h)
